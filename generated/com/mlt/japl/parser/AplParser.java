/* Generated By:JavaCC: Do not edit this line. AplParser.java */
package com.mlt.japl.parser;

import java.io.Reader;
import com.mlt.japl.newfns.*;
import com.mlt.japl.ast.*;
import com.mlt.japl.errors.*;
import com.mlt.japl.utils.FunctionRegistry;
import com.mlt.japl.workspace.*;
import java.io.PrintWriter;
import com.mlt.japl.utils.PrintConfig;
import com.mlt.japl.newarrays.IValue;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.HashMap;

public class AplParser implements AplParserConstants {
  EvalContext context;
  FunctionRegistry fnRegistry;
  Stack<HashMap<String,Func >> userFnContext;

  public AplParser(Reader reader, EvalContext context)
  {
    this(reader);
    token_source.ctx = context;
    token_source.parser = this;
    this.context = context;
    this.fnRegistry = new FunctionRegistry(context);
    userFnContext = new Stack<HashMap<String,Func >>();
  }

  public void printToErrorStream(String s)
  {
    PrintWriter writer = new PrintWriter(context.getErrorStream());
    writer.println(s);
    writer.flush();
  }

  public void printToOutputStream(String s)
  {
    PrintWriter writer = new PrintWriter(context.getOutputStream());
    writer.println(s);
    writer.flush();
  }

  public void skipTo(int token)
  {
    Token x;
    do
    {
      try
      {
        x = getNextToken();
      }
      catch(TokenMgrError e)
      {
        return;
      }
    } while(x.kind != token);
  }

  public void eval(AstNode n)
  {
    IValue val = n.eval(context);
    if(!(n instanceof AssignmentNode))
      printToOutputStream(val.asString(new PrintConfig()));
  }

  public void executeCommand(String cmd)
  {
        System.out.println("interpreter command: " + cmd);
        if(cmd.equals(")CLEAR"))
        {
          context.reset();
          printToOutputStream("CLEAR WS");
        }
  }

  public EvalContext getContext()
  {
    return context;
  }

  public Func lookupFn(String name)
  {
    if(name.startsWith("."))
    {
      return new MethodCallFn(name.substring(1));
    }
    Func fn = fnRegistry.lookup(name);
   if(fn==null) return context.tryGetFunction(name);
   else return fn;
  }

  public Func buildMonadicOperator(String n, Func arg)
  {
    Func fn = fnRegistry.buildMonadicOperator(n, arg);
    if(fn==null)
            throw new SyntaxError();
        return fn;
  }

  public void pushUserFnContext()
  {
    System.out.println("Register user function context");
        userFnContext.push(new HashMap<String,Func >());
  }

  public void popUserFnContext()
  {
    System.out.println("De-register user function context");
        userFnContext.pop();
  }

  public void registerUserFn(String id, Func fn)
  {
    if(userFnContext.empty()) return;

    System.out.println("Registering user fn");
        userFnContext.peek().put(id, fn);
  }

  public boolean isUserFn(String id)
  {
    System.out.println("check if " +id + " is in user function context");
    if(!userFnContext.empty())
    {
            HashMap<String,Func > top = userFnContext.peek();
            boolean rval =  top.containsKey(id);
            if(rval) System.out.println("Yes it is!"); else System.out.println("No it's not!");
            return rval;
    }
    return false;
  }

  public AstNode parse()
  {
     try
     {
                return apl_expr();
     } catch(ParseException e)
     {
                throw new SyntaxError();
     }
  }

// execute top level expressions one at a time
  final public void eval_stream() throws ParseException {
  Token command;
  AstNode t;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        t = toplevel_fn_def();
         System.out.println("DEF: " + t.print());
        label_3:
        while (true) {
          jj_consume_token(STMTSEPARATOR);
          if (jj_2_2(2)) {
            ;
          } else {
            break label_3;
          }
        }
      } else if (jj_2_6(2)) {
        command = jj_consume_token(INTERPRETERCOMMAND);
                    executeCommand(command.image);
        label_4:
        while (true) {
          jj_consume_token(STMTSEPARATOR);
          if (jj_2_3(2)) {
            ;
          } else {
            break label_4;
          }
        }
      } else if (jj_2_7(2)) {
        t = toplevelexpr();
                    System.out.println(t.print());
                    eval(t);
        label_5:
        while (true) {
          jj_consume_token(STMTSEPARATOR);
          if (jj_2_4(2)) {
            ;
          } else {
            break label_5;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_8(2)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(0);
  }

  final public AstNode toplevelexpr() throws ParseException {
  AstNode t;
    if (jj_2_9(2)) {
      t = repeat_expr();
                {if (true) return t;}
    } else if (jj_2_10(2)) {
      t = if_expr();
      {if (true) return t;}
    } else if (jj_2_11(2)) {
      t = while_expr();
          {if (true) return t;}
    } else if (jj_2_12(2)) {
      t = for_expr();
          {if (true) return t;}
    } else if (jj_2_13(2)) {
      t = arrayexpr();
          {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode toplevel_expr_list() throws ParseException {
  AstNode c;
  List<AstNode> statements = new ArrayList<AstNode>();
    c = toplevelexpr();
    statements.add(c);
    label_6:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_6;
      }
      label_7:
      while (true) {
        jj_consume_token(STMTSEPARATOR);
        if (jj_2_15(2)) {
          ;
        } else {
          break label_7;
        }
      }
      c = toplevelexpr();
      statements.add(c);
    }
          if(statements.size()==1) {if (true) return statements.get(0);}
          {if (true) return new StatementListNode(statements);}
    throw new Error("Missing return statement in function");
  }

// top level expression ends with EOF
  final public AstNode apl_expr() throws ParseException {
  AstNode t;
    t = toplevelexpr();
    jj_consume_token(0);
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// expression is a single expression or a list of expressions
  final public AstNode arrayexpr() throws ParseException {
        AstNode t;
    if (jj_2_16(2)) {
      t = monadic_call_or_niladic();
          {if (true) return t;}
    } else if (jj_2_17(2)) {
      t = dyadic_call_or_array();
          {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode if_expr() throws ParseException {
  AstNode cond=null;
  AstNode thenbranch=null;
  AstNode elsebranch=null;
  AstNode c = null;
  AstNode tb = null;
  List<AstNode > elseIfs = new ArrayList<AstNode >();
  List<AstNode > thenBranches = new ArrayList<AstNode >();
    jj_consume_token(20);
    cond = arrayexpr();
    label_8:
    while (true) {
      jj_consume_token(STMTSEPARATOR);
      if (jj_2_18(2)) {
        ;
      } else {
        break label_8;
      }
    }
    thenbranch = toplevel_expr_list();
    label_9:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    label_10:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(21);
      c = arrayexpr();
      label_11:
      while (true) {
        jj_consume_token(STMTSEPARATOR);
        if (jj_2_21(2)) {
          ;
        } else {
          break label_11;
        }
      }
      tb = toplevel_expr_list();
      label_12:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(STMTSEPARATOR);
      }
             elseIfs.add(c);
             thenBranches.add(tb);
    }
    if (jj_2_25(2)) {
      jj_consume_token(22);
      label_13:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(STMTSEPARATOR);
      }
      elsebranch = toplevel_expr_list();
      label_14:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(STMTSEPARATOR);
      }
    } else {
      ;
    }
    jj_consume_token(23);
          {if (true) return new IfNode(cond, thenbranch, elsebranch, elseIfs, thenBranches);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode for_expr() throws ParseException {
        Token loopVar = null;
        AstNode expr = null;
        AstNode body = null;
    jj_consume_token(24);
    loopVar = jj_consume_token(ID);
    jj_consume_token(25);
    expr = arrayexpr();
    label_15:
    while (true) {
      jj_consume_token(STMTSEPARATOR);
      if (jj_2_26(2)) {
        ;
      } else {
        break label_15;
      }
    }
    body = toplevel_expr_list();
    label_16:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    jj_consume_token(26);
    {if (true) return new ForNode(loopVar.toString(), expr, body);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode while_expr() throws ParseException {
  AstNode cond, body;
    jj_consume_token(27);
    cond = arrayexpr();
    label_17:
    while (true) {
      jj_consume_token(STMTSEPARATOR);
      if (jj_2_28(2)) {
        ;
      } else {
        break label_17;
      }
    }
    body = toplevel_expr_list();
    label_18:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    jj_consume_token(28);
          {if (true) return new WhileNode(cond, body);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode repeat_expr() throws ParseException {
  AstNode count, body;
    jj_consume_token(29);
    count = arrayexpr();
    label_19:
    while (true) {
      jj_consume_token(STMTSEPARATOR);
      if (jj_2_30(2)) {
        ;
      } else {
        break label_19;
      }
    }
    body = toplevel_expr_list();
    label_20:
    while (true) {
      if (jj_2_31(2)) {
        ;
      } else {
        break label_20;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    jj_consume_token(30);
    {if (true) return new RepeatNode(count, body);}
    throw new Error("Missing return statement in function");
  }

// monadic call starts with a function expression, followed by optional axis expression and
// argument expr
  final public AstNode monadic_call_or_niladic() throws ParseException {
  Token fn;
  Func s;
  AstNode t = null;
  AstNode arg = null;
  AstNode axis = null;
    if (jj_2_34(2)) {
      fn = jj_consume_token(FUNC);
      jj_consume_token(31);
      t = arrayexpr();
    {if (true) return new AssignmentNode(fn.toString(), t);}
    } else if (jj_2_35(2)) {
      s = fn_expr();
      if (jj_2_32(2)) {
        jj_consume_token(32);
        axis = arrayexpr();
        jj_consume_token(33);
      } else {
        ;
      }
      if (jj_2_33(2)) {
        t = arrayexpr();
      } else {
        ;
      }
    if(t!=null)
    {
      {if (true) return new MonadicCallNode(s, t, axis);}
    } else
    {
      {if (true) return new NiladicCallNode(s);}
    }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// dyadic call starts with an array, followed by function expression, possible axis expr and right
// single expression
  final public AstNode dyadic_call_or_array() throws ParseException {
  AstNode left;
  Func op = null;
  AstNode right = null;
  AstNode axis = null;
    left = array();
    if (jj_2_37(2)) {
      op = fn_expr();
      if (jj_2_36(2)) {
        jj_consume_token(32);
        axis = arrayexpr();
        jj_consume_token(33);
      } else {
        ;
      }
      right = arrayexpr();
    } else {
      ;
    }
    if(op!=null)
    {
                {if (true) return new DyadicCallNode(op, left, right, axis);}
    } else
    {
                {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

// array is a sequence of 1 or more elements (identifiers, paren-enclosed expressions, constants)
  final public AstNode array() throws ParseException {
  AstNode idexpr = null;
  Token s;
  boolean mustEvaluate = false;
  List<AstNode > nodeList = new ArrayList<AstNode>();
    label_21:
    while (true) {
      if (jj_2_38(2)) {
        idexpr = identifierexpr();
            nodeList.add(idexpr);
            mustEvaluate = true;
      } else if (jj_2_39(2)) {
        s = jj_consume_token(CONSTANT);
            nodeList.add(new ConstantAstNode(s.toString()));
      } else if (jj_2_40(2)) {
        idexpr = string_arrayexpr();
            nodeList.add(idexpr);
      } else if (jj_2_41(2)) {
        idexpr = paren_arrayexpr();
            nodeList.add(idexpr);
            mustEvaluate = true;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_42(2)) {
        ;
      } else {
        break label_21;
      }
    }
          if(mustEvaluate)
          {
            if(nodeList.size()==1) {if (true) return nodeList.get(0);}
            {if (true) return new EvalArrayNode(nodeList);}
          }
          else
          {
            if(nodeList.size()==1) {if (true) return nodeList.get(0);}
                {if (true) return new ConstArrayNode(nodeList);}
          }
    throw new Error("Missing return statement in function");
  }

  final public AstNode string_arrayexpr() throws ParseException {
        Token t = null;
        AstNode e = null;
    t = jj_consume_token(STRING);
    if (jj_2_43(2)) {
      jj_consume_token(32);
      e = indexexpr();
      jj_consume_token(33);
    } else {
      ;
    }
    AstNode s = new ConstantAstNode(t.toString());
    if(e!=null) {if (true) return new ArrayIndexerNode(s,e);}
    else {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode paren_arrayexpr() throws ParseException {
        AstNode t = null;
        AstNode e = null;
    jj_consume_token(34);
    t = arrayexpr();
    jj_consume_token(35);
    if (jj_2_44(2)) {
      jj_consume_token(32);
      e = indexexpr();
      jj_consume_token(33);
    } else {
      ;
    }
    if(e!=null)
    {
      {if (true) return new ArrayIndexerNode(t, e);}
    } else {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode identifierexpr() throws ParseException {
  AstNode e = null;
  AstNode e2 = null;
  Token ident = null;
    ident = jj_consume_token(ID);
    if (jj_2_45(2)) {
      jj_consume_token(32);
      e = indexexpr();
      jj_consume_token(33);
    } else {
      ;
    }
    if (jj_2_46(2)) {
      jj_consume_token(31);
      e2 = arrayexpr();
    } else {
      ;
    }
    if(e2!=null)
    {
       if(e2 instanceof NiladicCallNode)
       {
          System.out.println(ident.toString() + " is a function assignment");
          registerUserFn(ident.toString(), ((NiladicCallNode)e2).func());
       }
       {if (true) return new AssignmentNode(ident.toString(), e2);}
    }
    else
            {if (true) return new IdentifierNode(ident.toString(), e);}
    throw new Error("Missing return statement in function");
  }

  final public IndexExprNode indexexpr() throws ParseException {
  List<AstNode> chain = new ArrayList<AstNode>();
  AstNode e = null;
    if (jj_2_47(2)) {
      e = arrayexpr();
    } else {
      ;
    }
    chain.add(e);
    e = null;
    label_22:
    while (true) {
      if (jj_2_48(2)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(36);
      if (jj_2_49(2)) {
        e = arrayexpr();
      } else {
        ;
      }
                    chain.add(e);
                    e = null;
    }
    {if (true) return new IndexExprNode(chain);}
    throw new Error("Missing return statement in function");
  }

  final public Func fn_expr() throws ParseException {
  Func s = null;
  AstNode userfn = null;
  Token m = null;
    s = operatorexpr();
    if (jj_2_50(2)) {
      m = jj_consume_token(MONADICOPERATOR);
    } else {
      ;
    }
       if(m!=null)
         {if (true) return buildMonadicOperator(m.toString(), s);}
       else
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode userfndef() throws ParseException {
  AstNode fnBody = null;
    jj_consume_token(37);
    pushUserFnContext();
    label_23:
    while (true) {
      if (jj_2_51(2)) {
        ;
      } else {
        break label_23;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    fnBody = toplevel_expr_list();
    label_24:
    while (true) {
      if (jj_2_52(2)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    jj_consume_token(38);
    popUserFnContext();
    {if (true) return fnBody;}
    throw new Error("Missing return statement in function");
  }

  final public Func operatorexpr() throws ParseException {
  Func right = null;
    if (jj_2_53(2)) {
      right = function_or_inner_product();
    {if (true) return right;}
    } else if (jj_2_54(2)) {
      right = monadic_operator_as_fn();
    {if (true) return right;}
    } else if (jj_2_55(2)) {
      right = outer_product();
        {if (true) return right;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Func outer_product() throws ParseException {
  Func right = null;
    jj_consume_token(OUTERPROD);
    right = operatorexpr();
          {if (true) return new OuterProdFn(right);}
    throw new Error("Missing return statement in function");
  }

  final public Token id_or_fnid() throws ParseException {
  Token t;
    if (jj_2_56(2)) {
      t = jj_consume_token(ID);
    {if (true) return t;}
    } else if (jj_2_57(2)) {
      t = jj_consume_token(FUNC);
        {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode toplevel_fn_def() throws ParseException {
  Token outname = null;
  Token namea = null;
  Token nameb = null;
  Token namec = null;
  Token lname = null;
  List<String > locals = new ArrayList<String >();
  AstNode body = null;
    jj_consume_token(DEL);
    if (jj_2_58(2)) {
      outname = jj_consume_token(ID);
      jj_consume_token(31);
    } else {
      ;
    }
    namea = id_or_fnid();
    if (jj_2_60(2)) {
      nameb = id_or_fnid();
      if (jj_2_59(2)) {
        namec = id_or_fnid();
      } else {
        ;
      }
    } else {
      ;
    }
    label_25:
    while (true) {
      if (jj_2_61(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(36);
      lname = jj_consume_token(ID);
                          locals.add(lname.toString());
    }
    label_26:
    while (true) {
      jj_consume_token(STMTSEPARATOR);
      if (jj_2_62(2)) {
        ;
      } else {
        break label_26;
      }
    }
    body = toplevel_expr_list();
    label_27:
    while (true) {
      if (jj_2_63(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(STMTSEPARATOR);
    }
    jj_consume_token(DEL);
          if(nameb==null)
          {
            UserFnNode n = new UserFnNode(context, outname!=null ? outname.toString() : null, locals, body);
                context.set(namea.toString(), n);
                {if (true) return n;}
          } else if(namec==null)
          {
            UserFnNode n = new UserFnNode(context, outname!=null ? outname.toString() : null, locals, body, nameb.toString());
                context.set(namea.toString(), n);
                {if (true) return n;}
          } else
          {
            UserFnNode n = new UserFnNode(context, outname!=null ? outname.toString() : null, locals, body, namec.toString(), namea.toString());
                context.set(nameb.toString(), n);
                {if (true) return n;}
          }
    throw new Error("Missing return statement in function");
  }

  final public Func monadic_operator_as_fn() throws ParseException {
  Token s = null;
    s = jj_consume_token(MONADICOPERATOR);
          {if (true) return lookupFn(s.toString());}
    throw new Error("Missing return statement in function");
  }

  final public Func operatorexpr_noinnerprod() throws ParseException {
        Func s = null;
        Func t = null;
    if (jj_2_64(2)) {
      s = outer_product();
          {if (true) return s;}
    } else if (jj_2_65(2)) {
      s = monadic_operator_as_fn();
      {if (true) return s;}
    } else if (jj_2_66(2)) {
      t = fn_or_userfn();
      {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Func fn_or_userfn() throws ParseException {
  Token s = null;
  AstNode userfn = null;
    if (jj_2_67(2)) {
      s = jj_consume_token(FUNC);
          {if (true) return lookupFn(s.toString());}
    } else if (jj_2_68(2)) {
      userfn = userfndef();
          {if (true) return new UserFnNode(userfn, context);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Func function_or_inner_product() throws ParseException {
  Func s = null;
  Token t = null;
  Func right = null;
  List<Func> chain = new ArrayList<Func>();
    s = fn_or_userfn();
    label_28:
    while (true) {
      if (jj_2_69(2)) {
        ;
      } else {
        break label_28;
      }
      jj_consume_token(39);
      right = operatorexpr_noinnerprod();
          chain.add(right);
    }
          if(chain.size() > 1)
          {
            chain.add(0,s);
            Func x = chain.get(0);
            for(int i=1; i<chain.size(); i++)
            {
              x = new InnerProdFn(x, chain.get(i));
            }
                {if (true) return x;}
          }
          else if(chain.size()==1)
          {
            {if (true) return new InnerProdFn(s, chain.get(0));}
          }
          else
          {
             {if (true) return s;}
          }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(MONADICOPERATOR)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(DEL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) return true;
    }
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(OUTERPROD)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(INTERPRETERCOMMAND)) return true;
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(MONADICOPERATOR)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(37)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(24)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(36)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(22)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(FUNC)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(STMTSEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AplParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[69];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AplParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AplParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AplParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AplParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AplParser(AplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AplParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 69; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
